(()=>{var t={417:t=>{t.exports=class{constructor(){this.towers=[[3,2,1],[],[]]}isValidMove(t,s){const e=this.towers[t],o=this.towers[s];return 0!==e.length&&(0==o.length||e[e.length-1]<o[o.length-1])}isWon(){return 3==this.towers[2].length||3==this.towers[1].length}move(t,s){return!!this.isValidMove(t,s)&&(this.towers[s].push(this.towers[t].pop()),!0)}print(){console.log(JSON.stringify(this.towers))}promptMove(t,s){this.print(),t.question("Enter a starting tower: ",(e=>{const o=parseInt(e);t.question("Enter an ending tower: ",(t=>{const e=parseInt(t);s(o,e)}))}))}run(t,s){this.promptMove(t,((e,o)=>{this.move(e,o)||console.log("Invalid move!"),this.isWon()?(this.print(),console.log("You win!"),s()):this.run(t,s)}))}}},897:t=>{t.exports=class{constructor(t,s){this.game=t,this.$el=s,this.setupTowers()}setupTowers(){for(let t=0;t<3;t++){let t=$("<ul>");for(let s=0;s<3;s++){let s=$("<li>");t.append(s)}this.$el.append(t)}}}}},s={};function e(o){if(s[o])return s[o].exports;var r=s[o]={exports:{}};return t[o](r,r.exports,e),r.exports}(()=>{const t=e(897),s=e(417);$((()=>{const e=$(".hanoi"),o=new s;new t(o,e)}))})()})();